name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
          - target: i686-pc-windows-msvc
            arch: x86

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-
            ${{ runner.os }}-cargo-build-

      - name: Build for ${{ matrix.target }}
        run: |
          cargo build --release --target ${{ matrix.target }} -p d3d9

      - name: Prepare artifacts
        run: |
          mkdir artifacts\${{ matrix.arch }}
          copy target\${{ matrix.target }}\release\d3d9.dll artifacts\${{ matrix.arch }}\

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: d3d9-${{ matrix.arch }}
          path: artifacts/${{ matrix.arch }}/
          retention-days: 30

  package:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'

    steps:
      - name: Download x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: d3d9-x64
          path: package/x64/

      - name: Download x86 artifact
        uses: actions/download-artifact@v4
        with:
          name: d3d9-x86
          path: package/x86/

      - name: Create release package
        run: |
          cd package
          zip -r ../dxproxy-binaries.zip .
          cd ..

      - name: Verify package structure
        run: |
          echo "Package contents:"
          unzip -l dxproxy-binaries.zip

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: dxproxy-binaries
          path: dxproxy-binaries.zip
          retention-days: 90

      - name: Upload to release (if release event)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dxproxy-binaries.zip
          asset_name: dxproxy-binaries.zip
          asset_content_type: application/zip
